// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubCheckerClient is the client API for SubChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubCheckerClient interface {
	CheckSub(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Result, error)
}

type subCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewSubCheckerClient(cc grpc.ClientConnInterface) SubCheckerClient {
	return &subCheckerClient{cc}
}

func (c *subCheckerClient) CheckSub(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/subscription.SubChecker/CheckSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubCheckerServer is the server API for SubChecker service.
// All implementations must embed UnimplementedSubCheckerServer
// for forward compatibility
type SubCheckerServer interface {
	CheckSub(context.Context, *UserID) (*Result, error)
	mustEmbedUnimplementedSubCheckerServer()
}

// UnimplementedSubCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedSubCheckerServer struct {
}

func (UnimplementedSubCheckerServer) CheckSub(context.Context, *UserID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSub not implemented")
}
func (UnimplementedSubCheckerServer) mustEmbedUnimplementedSubCheckerServer() {}

// UnsafeSubCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubCheckerServer will
// result in compilation errors.
type UnsafeSubCheckerServer interface {
	mustEmbedUnimplementedSubCheckerServer()
}

func RegisterSubCheckerServer(s grpc.ServiceRegistrar, srv SubCheckerServer) {
	s.RegisterService(&SubChecker_ServiceDesc, srv)
}

func _SubChecker_CheckSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubCheckerServer).CheckSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubChecker/CheckSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubCheckerServer).CheckSub(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// SubChecker_ServiceDesc is the grpc.ServiceDesc for SubChecker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubChecker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubChecker",
	HandlerType: (*SubCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSub",
			Handler:    _SubChecker_CheckSub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}
