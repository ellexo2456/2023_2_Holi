// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "2023_2_Holi/domain"

	mock "github.com/stretchr/testify/mock"
)

// FilmsRepository is an autogenerated mock type for the FilmsRepository type
type FilmsRepository struct {
	mock.Mock
}

// GetFilmArtists provides a mock function with given fields: filmId
func (_m *FilmsRepository) GetFilmArtists(filmId int) ([]domain.Artist, error) {
	ret := _m.Called(filmId)

	var r0 []domain.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Artist, error)); ok {
		return rf(filmId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Artist); ok {
		r0 = rf(filmId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(filmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmData provides a mock function with given fields: id
func (_m *FilmsRepository) GetFilmData(id int) (*domain.Film, error) {
	ret := _m.Called(id)

	var r0 *domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Film, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Film); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilmsByGenre provides a mock function with given fields: genre
func (_m *FilmsRepository) GetFilmsByGenre(genre string) ([]domain.Film, error) {
	ret := _m.Called(genre)

	var r0 []domain.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Film, error)); ok {
		return rf(genre)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Film); ok {
		r0 = rf(genre)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(genre)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFilmsRepository creates a new instance of FilmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilmsRepository {
	mock := &FilmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
