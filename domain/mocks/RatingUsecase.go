// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	domain "2023_2_Holi/domain"

	mock "github.com/stretchr/testify/mock"
)

// RatingUsecase is an autogenerated mock type for the RatingUsecase type
type RatingUsecase struct {
	mock.Mock
}

// Add provides a mock function with given fields: rate
func (_m *RatingUsecase) Add(rate domain.Rate) error {
	ret := _m.Called(rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Rate) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rated provides a mock function with given fields: rete
func (_m *RatingUsecase) Rated(rete domain.Rate) (bool, error) {
	ret := _m.Called(rete)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Rate) (bool, error)); ok {
		return rf(rete)
	}
	if rf, ok := ret.Get(0).(func(domain.Rate) bool); ok {
		r0 = rf(rete)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(domain.Rate) error); ok {
		r1 = rf(rete)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: rate
func (_m *RatingUsecase) Remove(rate domain.Rate) error {
	ret := _m.Called(rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Rate) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRatingUsecase creates a new instance of RatingUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingUsecase {
	mock := &RatingUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
