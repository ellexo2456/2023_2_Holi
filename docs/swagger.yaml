basePath: /
definitions:
  domain.Credentials:
    properties:
      email:
        type: string
      password:
        items:
          type: integer
        type: array
    type: object
  domain.Genre:
    properties:
      name:
        type: string
    type: object
  domain.Response:
    properties:
      body: {}
      err:
        type: string
    type: object
  domain.User:
    properties:
      email:
        type: string
      id:
        type: integer
      imageData:
        items:
          type: integer
        type: array
      imagePath:
        type: string
      name:
        type: string
      password:
        items:
          type: integer
        type: array
    type: object
  domain.UserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - id
    - name
    - password
    type: object
host: 127.0.0.1
info:
  contact:
    email: ax.chinaev@yandex.ru
    name: Alex Chinaev
    url: https://vk.com/l.chinaev
  description: API of the nelfix project by holi
  license:
    name: AS IS (NO WARRANTY)
  title: Netfilx API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: create user session and put it into cookie
      parameters:
      - description: user credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Credentials'
      responses:
        "200":
          description: OK
          schema:
            properties:
              body:
                properties:
                  id:
                    type: integer
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              err:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              err:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              err:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              err:
                type: string
            type: object
      summary: login user
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: delete current session and nullify cookie
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            properties:
              err:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              err:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              err:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              err:
                type: string
            type: object
      summary: logout user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: add new user to db and return it id
      parameters:
      - description: user credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              body:
                properties:
                  id:
                    type: integer
                type: object
            type: object
        "400":
          description: Bad Request
          schema:
            properties:
              err:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              err:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              err:
                type: string
            type: object
      summary: register user
      tags:
      - auth
  /api/v1/films/{id}:
    get:
      description: Get content for Film page
      parameters:
      - description: Id film you want to get.
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
          schema:
            type: json
        "404":
          description: Not Found
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: Get Film data by id
      tags:
      - Films
  /api/v1/films/cast/{id}:
    get:
      description: Get a list of films based on the cast name.
      parameters:
      - description: The Films of the Cast you want to retrieve.
        in: path
        name: cast
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
          schema:
            type: json
        "404":
          description: Not Found
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: Get cast page
      tags:
      - Cast
  /api/v1/films/genre/{genre}:
    get:
      description: Get a list of films based on the specified genre.
      parameters:
      - description: The genre of the Films you want to retrieve.
        in: path
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
          schema:
            type: json
        "404":
          description: Not Found
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: Get films by genre
      tags:
      - Films
  /api/v1/profile/{id}:
    get:
      description: Get user data by id
      parameters:
      - description: The user id you want to retrieve.
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
        "400":
          description: Bad Request
          schema:
            type: json
        "404":
          description: Not Found
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: Get user by id
      tags:
      - profile
  /api/v1/profile/update:
    post:
      consumes:
      - application/json
      description: update user data in db and return it
      parameters:
      - description: user that must be updated
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/domain.Response'
            - properties:
                body:
                  properties:
                    user:
                      $ref: '#/definitions/domain.User'
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            type: json
        "403":
          description: Forbidden
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: update profile
      tags:
      - profile
  /v1/genres:
    get:
      description: Get a list of genres.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Genre'
            type: array
        "400":
          description: Bad Request
          schema:
            type: json
        "404":
          description: Not Found
          schema:
            type: json
        "500":
          description: Internal Server Error
          schema:
            type: json
      summary: Get genres
      tags:
      - genres
schemes:
- http
swagger: "2.0"
